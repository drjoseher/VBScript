sub main

Set ShellApp = CreateObject("Shell.Application")
Set Ret = ShellApp.BrowseForFolder(0, "Seleccione la carpeta donde se encuentran las liquidaciones)", 16384)
Set oFSO = CreateObject("Scripting.FileSystemObject")
if not ret is nothing then
    For Each oFile In oFSO.GetFolder(Ret.Self.Path).Files
        xRuta = oFile.path
        call importarFuncion(xRuta)
    next
msgbox "Importacion finalizada"
end if

end sub


function importarFuncion (xRuta) 
'' Cargo mi archivo XML
    Set xmlDoc = CreateObject("Microsoft.XMLDOM")
    xmlDoc.Load(xRuta)   ' xRuta del archivo XML
'' Para cargar una nueva transaccion es necesario conocer la unidad operativa
    set xUnidadOperativa = InstanciarBO( "c0c5e2c7-0e71-11d6-93e4-00e07d9040b9", "UORECURSOSHUMANOS", self.Workspace )
    set xNovedad = CrearTransaccion( "COD555", xUnidadOperativa )
    
'' Obtengo el CUIT del empleado
    n = 0
    Set ElemList = xmlDoc.getElementsByTagName("presentacion/empleado/cuit")
    xCuit = ElemList.item(n).Text
''  Debo validar que el empleado exsta en el sistema
    set xEmpleado =  ExisteBO(self, "EMPLEADO", "CUIT", xCuit, nil, true, false, "=")
    

      if not (xEmpleado is nothing) then
    
       set xUnidad =  InstanciarBO(  "76c697a6-3dae-11d5-b059-004854841c8a", "UNIDADMEDIDA", self.Workspace )
       call insertDeduccion(xmlDoc, xNovedad, xEmpleado, xUnidad)
       call insertCarga(xmlDoc, xNovedad, xEmpleado, xUnidad)
       self.Workspace.commit
       
    end if
    
end function




function insertDeduccion (xmlDoc, xNovedad, xEmpleado, xUnidad)
    n = 0
    i = 0
    r = 0
    z = 0

    set colNodesDosTres = xmlDoc.selectNodes ("/presentacion/deducciones/deduccion") 
    n = colNodesDosTres.length '' Con este metodo obetenemos la longitud de las deducciones
    a = n
    n = 0

    ''Suma_Mes = 0
    xMontoTotal = 0

    do while a > n
        
        set xItem =  CrearItemTransaccion( xNovedad )
        xItem.EMPLEADO = xEmpleado
        
        Set ElemList = xmlDoc.getElementsByTagName("presentacion/deducciones/deduccion/denominacion")
        xDenominacion = ElemList.item(n).Text

        Set colNodesCinco = xmlDoc.documentElement.SelectNodes("/presentacion/deducciones/deduccion")
        xDeduccion = colNodesCinco(n).getAttribute("tipo")
    
        Set ElemList = xmlDoc.getElementsByTagName("presentacion/deducciones/deduccion/montoTotal")
        TextoSeis = ElemList.item(n).Text
        xMontoTotal = CInt(TextoSeis)

        
         xDeduccion = "D" & xDeduccion
         xFlag = false
         call insertConcepto(xDeduccion, xItem, xFlag)
         ''xItem.REFERENCIA = xConcepto
         xItem.CANTIDAD_UNIDADMEDIDA = xUnidad
         xItem.VALOR_IMPORTE = xMontoTotal
         xItem.DETALLE = xDenominacion
        

           ''call periodo_572 (xmlDoc, xRuta, xMontoTotal, r, i, Suma_Mes)
        n = n + 1
        i = i + 1
    loop 
end function

function insertCarga (xmlDoc, xNovedad, xEmpleado, xUnidad)

n = 0

    set colNodesNueveDos = xmlDoc.selectNodes ("/presentacion/cargasFamilia/cargaFamilia")
    for Each objNodeDos in colNodesNueveDos
        set xUnidad =  InstanciarBO(  "76c697a6-3dae-11d5-b059-004854841c8a", "UNIDADMEDIDA", self.Workspace )
        set xItem =  CrearItemTransaccion( xNovedad )
        xItem.EMPLEADO = xEmpleado
         ''Set ElemList = xmlDoc.getElementsByTagName("presentacion/cargasFamilia/cargaFamilia/tipoDoc")
        ''xTipo = ElemList.item(n).Text
    
        Set ElemList = xmlDoc.getElementsByTagName("presentacion/cargasFamilia/cargaFamilia/nroDoc")
        xCuit = ElemList.item(n).Text
        
            Set ElemList = xmlDoc.getElementsByTagName("presentacion/cargasFamilia/cargaFamilia/nombre")
            xNombre = ElemList.item(n).Text
              
        ''    Set ElemList = xmlDoc.getElementsByTagName("presentacion/cargasFamilia/cargaFamilia/mesHasta")
        ''    TextoOnce = ElemList.item(n).Text    
        
            Set ElemList = xmlDoc.getElementsByTagName("presentacion/cargasFamilia/cargaFamilia/apellido")''
            xApellido = ElemList.item(n).Text
            xDetalle = xCuit & " - "& xNombre &" "& xApellido
            
            Set ElemList = xmlDoc.getElementsByTagName("presentacion/cargasFamilia/cargaFamilia/parentesco")
            xParentesco = ElemList.item(n).Text
        
        
        xParentesco = "P" & xParentesco 
        xFlag = true
        call insertConcepto(xParentesco, xItem, xFlag)
        ''xItem.REFERENCIA = xConcepto
        xItem.CANTIDAD_UNIDADMEDIDA = xUnidad
        ''xItem.VALOR_IMPORTE = 0
        xItem.DETALLE = xDetalle
        n = n + 1
    next 
end function


function insertConcepto(xTipo, xItem, xFlag)
stop
    
'' Primero busco el codigo en la tabla de conceptos generales
         set xItemTG = ExisteBO( self, "SJITEMTABLAGENERAL", "CODIGO", xTipo, nil, true, false, "=" )
         xItemTGId = xItemTG.ID
'' Con el Id instancio la tabla para poder navegar sus columnas
         set xInsTabla = InstanciarBO(  xItemTGId, "SJITEMTABLAGENERAL", self.Workspace )
         set xBOExtension = xInsTabla.BOEXTENSION
         xBOExtensionId = xBOExtension.ID
'' Con BoExtensionID Intancio la extension de atributos      
         set xInsExtension =  InstanciarBO( xBOExtensionId, "UD_ITEMTABLAGENERAL", self.Workspace )
         set xConceptoId = xInsExtension.CONCEPTO
         xIdConcepto = xConceptoId.ID
'' Con el concepto ID ya podemos intanciar el concepto del item de transaccion     
         set xConcepto =  InstanciarBO(  xIdConcepto, "CONCEPTO", self.Workspace )
          xItem.REFERENCIA = xConcepto
         
         if xFlag then
             xValorParentesco = xInsTabla.VALOR
            xItem.VALOR_IMPORTE = xValorParentesco
         end if 
         
end function












function periodo_572 ( xmlDoc, xRuta, valor, r, i, Suma_Mes )

    xmlDoc.Load(xRuta)

    Suma_Monto = 0


    Set NodeListUno = xmlDoc.documentElement.SelectNodes("/presentacion/deducciones/deduccion/periodos/periodo")
    TextoTrece = NodeListUno(i).getAttribute("montoMensual")
    Suma_Mes = TextoTrece
    Suma_Mes = CInt(Suma_Mes)
    Suma_Monto = CInt(Suma_Monto)

    do while valor > Suma_Mes
        i = i + 1
        TextoTrece = NodeListUno(i).getAttribute("montoMensual")
        TextoTrece = CInt (TextoTrece)
        Suma_Monto = TextoTrece
        Suma_Mes = Suma_Mes + Suma_Monto
    loop 

    do while i => r
        TextoTrece = NodeListUno(r).getAttribute("montoMensual")
        TextoCatorce = NodeListUno(r).getAttribute("mesHasta")
        TextoQuince = NodeListUno(r).getAttribute("mesDesde")
        r = r + 1
    loop
end function
